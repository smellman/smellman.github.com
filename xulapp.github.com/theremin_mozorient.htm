<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>Theremin (btm's MozOrientation Version)</title>
<style>
:root {
	-moz-user-select: none;
}
li.current {
	color: #ff0000;
}
</style>
<script>
(function() {
	function Theremin(sampleRate) {
		sampleRate = sampleRate | 0 || 44100;
		this.sampleRate = sampleRate;
		this.frequency = 0;
		this.volume = 0;
		this.preBufferMsec = 250;
		this.phase = 0;
		this.timer = null;
		this.paused = true;
		this.waveForm = 'sine';
	}
	Theremin.prototype = {
		constructor: Theremin,
		getNextBuffer: function getNextBuffer(length) {
			var buffer = new Float32Array(length);
			var freq = this.frequency;
			if (!freq || freq < 0)
				return buffer;
			var sampleRate = this.audio.mozSampleRate;
			var volume = this.volume;
			var waveForm = this.waveForm;

			var PI_2 = Math.PI * 2;
			var sin = Math.sin;
			var random = Math.random;

			var phaseOffset = this.phase;
			var phase = phaseOffset;
			var value = 0;
			for (var i = 0; i < length; i++) {
				phase = ((i + 1) * freq / sampleRate + phaseOffset) % 1;
				switch (waveForm) {
				case 'sin':
				case 'sine':
					value = sin(PI_2 * phase);
					break;
				case 'tri':
				case 'triangle':
					var zone = phase * 4;
					switch (zone | 0) {
					case 0:
						value = zone;
						break;
					case 1:
					case 2:
						value = 2 - zone;
						break;
					case 3:
						value = zone - 4;
						break;
					}
					break;
				case 'square':
					value = phase < 0.5 ? 0.5 : -0.5;
					break;
				case 'saw':
				case 'sawtooth':
					value = phase < 0.5 ? phase : phase - 1;
					break;
				case 'white':
				case 'whitenoise':
					value = random() * 2 - 1;
					break;
				case 'pink':
				case 'pinknoise':
					value = pinkNoise();
					break;
				case 'brown':
				case 'brownian':
				case 'brownnoise':
				case 'browniannoise':
					var v = value + random() / 2 - 0.25;
					value = v < -1 ? -1 : 1 < v ? 1 : v;
					break;
				default:
					value = 0;
				}
				buffer[i] = volume * value;
			}
			this.phase = phase;
			return buffer;
		},
		play: function play() {
			if (!this.paused)
				this.pause();
			this.paused = false;

			var audio = new Audio();
			audio.mozSetup(1, this.sampleRate);
			this.audio = audio;
			var samplesPerMsec = this.sampleRate / 1000;
			var rest = 0;

			var self = this;
			var writeAudio = function() {
				var now = Date.now();
				var nextBufferLength = samplesPerMsec * (now - lastWriteTime) + rest;
				audio.mozWriteAudio(self.getNextBuffer(nextBufferLength | 0));
				rest = nextBufferLength % 1;
				lastWriteTime = now;
			};
			this.timer = setInterval(writeAudio, 0);
			var lastWriteTime = Date.now() - this.preBufferMsec;
			writeAudio();
		},
		pause: function pause() {
			if (this.paused) return;
			this.paused = true;

			clearInterval(this.timer);
			var audio = this.audio;
			audio.mozWriteAudio(this.getNextBuffer((1 - this.phase) * audio.mozSampleRate / this.frequency | 0));
		}
	};

	// http://www.finetune.co.jp/~lyuka/technote/pinknoise/
	var pinkNoise = (function() {
		var random = Math.random;
		var z, k, t;

		function pinkNoise() {
			var q = random() < 0.5 ? 1 : -1;
			for (var i = 0; i < 16; i++) {
				z[i] = (q * k[i] + z[i] * (1 - k[i]));
				q = (q + z[i]) * 0.5;
			}
			t = q * 0.75 + t * 0.25;
			return t < 1e-4 ? t * 1e4 : 1;
		}
		pinkNoise.init = function() {
			z = [];
			k = [];
			t = 0;

			for (var i = 0; i < 16; i++)
				z[i] = 0;

			k[15] = 0.5;
			for (var i = 15; 0 < i; i--)
				k[i - 1] = k[i]  * 0.25;
		};
		pinkNoise.init();

		return pinkNoise;
	})();

	document.addEventListener('DOMContentLoaded', function() {
		var theremin = new Theremin();
		var hz = document.getElementById('hz').firstChild;

		document.addEventListener('mousedown', function() {
			theremin.play();
			hz.nodeValue = theremin.frequency;
		}, false);
		window.addEventListener('MozOrientation', function(event) {
			theremin.frequency = 1220 * (Math.abs(event.x) * 2) * (Math.abs(event.z) * 2) | 0;
			theremin.volume = Math.abs(event.y);
			if (theremin.paused) return;
			hz.textContent = theremin.frequency;
		}, true);
		document.addEventListener('mouseup', function() {
			theremin.pause();
		}, false);
		document.addEventListener('keypress', function(event) {
			var index = event.which - 49;
			var waveForm = ['sin', 'tri', 'square', 'saw', 'white', 'pink', 'brown'][index];
			if (!waveForm) return;

			theremin.waveForm = waveForm;
			document.querySelector('li.current').classList.remove('current');
			document.querySelector('ol').children[index].classList.add('current');
		}, false);
	}, false);
})();
</script>
</head>
<body>
	<p>
		<a href="https://wiki.mozilla.org/Audio_Data_API">Audio Data API</a>
		を使用したテルミンもどき、の加速度センサー版です。周波数と波形の変更がリアルタイムで音に反映されます。マウスダウンで開始、マウスアップで停止、X軸をZ軸で周波数を、Y軸で音量を調整します。
	</p>
	<ol>
		<li class="current">sine</li>
		<li>triangle</li>
		<li>square</li>
		<li>sawtooth</li>
		<li>whitenoise</li>
		<li>pinknoise</li>
		<li>brownnoise</li>
	</ol>
	<p><span id="hz">0</span> Hz</p>
</body>
</html>
